openapi: 3.0.0

info:
  title: Dotpot iT Website API Documentation
  description: The "Dotpot iT Website API Documentation" provides comprehensive information and reference for developers to integrate and interact with the Dotpot iT website's API. It covers the available endpoints, request and response structures, authentication mechanisms, and other relevant details necessary for successful API integration.
  version: 1.0

  

servers:
  - url: http://localhost:8800/
    description:  Local server 
  - url: https://dotpotit.com/
    description:  Pre Production server
  - url: https://dotpotit.com/
    description:  Production server
  
 
definitions:
  Technology:
    type: object
    properties:
      title:
        type: string
      sdes:
        type: string
      icon:
        type: string
      cost:
        type: number
  Addon:
    type: object
    properties:
      title:
        type: string
      sdes:
        type: string
      icon:
        type: string
      cost:
        type: number
  Service:
    type: object
    properties:
      title:
        type: string
        required: true
      icon:
        type: string
      technologies:
        type: array
        items:
          $ref: "#/definitions/Technology"
      addons:
        type: array
        items:
          $ref: "#/definitions/Addon"
    required:
      - title
  
  Hero:
    type: object
    properties:
      title:
        type: string
        description: The title of the hero
      subtitle:
        type: string
        description: The subtitle of the hero
      description:
        type: string
        description: The description of the hero
      button_text:
        type: string
        description: The button text of the hero
      button_link:
        type: string
        description: The button link of the hero
      image:
        type: string
        description: The image URL of the hero
    required:
      - title
      - subtitle
      - description
      - image

  ContactCenterService:
    type: object
    properties:
      title:
        type: string
        description: The title of the contact center service
      subtitle:
        type: string
        description: The subtitle of the contact center service
      description:
        type: string
        description: The description of the contact center service
      icon:
        type: string
        description: The icon of the contact center service
      link:
        type: string
        description: The link of the contact center service
    required:
      - title
      - icon

  CompanyInfo:
    type: object
    properties:
      name:
        type: string
        description: The name of the company
      primary_logo:
        type: string
        description: The URL of the primary logo
      secondary_logo:
        type: string
        description: The URL of the secondary logo
      address:
        type: string
        description: The address of the company
      slogan:
        type: string
        description: The slogan of the company
      logo:
        type: string
        description: The URL of the logo
      logo_dark:
        type: string
        description: The URL of the dark version of the logo
      phone:
        type: array
        items:
          type: string
        description: An array of phone numbers
      email:
        type: array
        items:
          type: string
        description: An array of email addresses
      about:
        type: string
        description: A description of the company
      video_link:
        type: string
        description: The URL of a video link
      image_link:
        type: string
        description: The URL of an image link
      other_info:
        type: string
        description: Other information about the company
    required:
      - name
      - primary_logo
      - secondary_logo
      - logo

  ClientResponse:
    type: object
    properties:
      client_id:
        type: string
        description: The ID of the client
      name:
        type: string
        description: The name of the client
      email:
        type: string
        description: The email of the client
      phone:
        type: string
        description: The phone number of the client
      whatsapp:
        type: string
        description: The WhatsApp number of the client
      skype:
        type: string
        description: The Skype ID of the client
      linkedin:
        type: string
        description: The LinkedIn profile URL of the client
      budget:
        type: number
        description: The budget of the client
      attachment:
        type: string
        description: The attachment file path
      message:
        type: string
        description: The message from the client
    required:
      - client_id
      - name
      - email
      - phone
      - message

  KeyFeature:
    type: object
    properties:
      title:
        type: string
        description: The title of the key feature
      subtitle:
        type: string
        description: The subtitle of the key feature
      description:
        type: string
        description: The description of the key feature
      icon:
        type: string
        description: The icon of the key feature
      link:
        type: string
        description: The link of the key feature
    required:
      - title
      - icon
      
  PartnershipModel:
    type: object
    properties:
      title:
        type: string
        description: The title of the partnership model
        required: true
      description:
        type: string
        description: The description of the partnership model
      icon:
        type: string
        description: The icon of the partnership model
        required: true
      subtitle:
        type: string
        description: The subtitle of the partnership model
      link:
        type: string
        description: The link of the partnership model
    required:
      - title
      - icon

  WhoWeWorkWith:
    type: object
    properties:
      title:
        type: string
        description: The title of the Who We Work With item
        required: true
      description:
        type: string
        description: The description of the Who We Work With item
      icon:
        type: string
        description: The icon of the Who We Work With item
        required: true
      subtitle:
        type: string
        description: The subtitle of the Who We Work With item
      link:
        type: string
        description: The link of the Who We Work With item
    required:
      - title
      - icon

  Color:
    type: object
    properties:
      colors:
        type: object
        properties:
          background:
            type: object
            properties:
              "500":
                type: string
          primary:
            type: object
            properties:
              "100":
                type: string
              "200":
                type: string
              "300":
                type: string
              "400":
                type: string
              "500":
                type: string
              "600":
                type: string
          secondary:
            type: object
            properties:
              "100":
                type: string
              "200":
                type: string
              "300":
                type: string
              "400":
                type: string
              "500":
                type: string
              "600":
                type: string
          buttonText:
            type: object
            properties:
              "500":
                type: string
          textColor:
            type: object
            properties:
              "500":
                type: string
          gray:
            type: object
            properties:
              "200":
                type: string
              "300":
                type: string
              "400":
                type: string
              "500":
                type: string
              "800":
                type: string
          border:
            type: string
          particleColor:
            type: string
      name:
        type: string
      selected:
        type: boolean


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer

  responses:
    ServerError:
      description: Internal server error occurred
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: A description of the error that occurred
              code:
                type: integer
                description: The HTTP status code associated with the error (e.g. 500)
    Unauthorized:
      description: Unauthorized access to the API
      headers:
        WWW-Authenticate:
          description: 'Required for 401 responses'
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: The request is invalid or missing required parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          description: A human-readable description of the error
        code:
          type: integer
          description: An error code that uniquely identifies the error
      required:
        - message
        - code
    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
        photo:
          type: string
        dateOfBirth:
          type: string
          format: date
        role:
          type: string
        fullName:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
        resetToken:
          type: string
        resetTokenExpiration:
          type: string
          format: date-time
      required:
        - username
        - email
        - password
    Blog:
      type: object
      properties:
        title:
          type: string
          required: true
        slug:
          type: string
        author:
          type: string
          format: objectid
          description: Reference to the User model
        body:
          type: string
          required: true
        tags:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
            type: string
        image:
          type: string
          required: true
        isPublished:
          type: boolean
      timestamps:
        type: boolean
    ClientReview:
      type: object
      properties:
        client_id:
          type: string
          format: uuid
          description: The ID of the client who submitted the response
        name:
          type: string
          description: The name of the person who submitted the response
        email:
          type: string
          format: email
          description: The email address of the person who submitted the response
        phone:
          type: string
          description: The phone number of the person who submitted the response
        whatsapp:
          type: string
          description: The WhatsApp number of the person who submitted the response
        skype:
          type: string
          description: The Skype username of the person who submitted the response
        linkedin:
          type: string
          description: The LinkedIn profile URL of the person who submitted the response
        budget:
          type: number
          description: The budget of the client who submitted the response
        attachment:
          type: string
          description: The URL of the attachment submitted by the client
        message:
          type: string
          description: The message submitted by the client
    Conversation:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier of the conversation.
        creator:
          type: string
          description: The username of the conversation creator.
        participant:
          type: string
          description: The username of the conversation participant.
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the conversation was created.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the conversation was last updated.

    Message:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier of the message.
        conversation_id:
          type: string
          description: The unique identifier of the conversation this message belongs to.
        sender:
          type: string
          description: The username of the message sender.
        receiver:
          type: string
          description: The username of the message receiver.
        text:
          type: string
          description: The text content of the message.
        attachment:
          type: string
          description: The URL of any attachment included in the message.
        isVisitorSeen:
          type: boolean
          description: Indicates whether the visitor has seen this message.
        isAdminSeen:
          type: boolean
          description: Indicates whether the admin has seen this message.
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the message was created.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the message was last updated.
    Job:
      type: object
      required:
        - title
        - company
      properties:
        title:
          type: string
          description: The title of the job.
        company:
          type: string
          description: The name of the company offering the job.
        location:
          type: string
          description: The location of the job.
        description:
          type: string
          description: A description of the job.
        responsibilities:
          type: array
          items:
            type: string
          description: A list of job responsibilities.
        qualifications:
          type: array
          items:
            type: string
          description: A list of job qualifications.
        experience:
          type: array
          items:
            type: string
          description: A list of required job experience.
        education:
          type: array
          items:
            type: string
          description: A list of required education or certifications.
        howToApply:
          type: string
          description: Instructions on how to apply for the job.
        salary:
          type: object
          properties:
            min:
              type: number
              description: The minimum salary for the job.
            max:
              type: number
              description: The maximum salary for the job.
          description: The salary range for the job.
        benefits:
          type: array
          items:
            type: string
          description: A list of benefits offered by the job.
        isRemote:
          type: boolean
          description: Whether the job is remote or not.
        isFullTime:
          type: boolean
          description: Whether the job is full-time or not.
      example:
        title: Senior Developer
        company: Acme Inc.
        location: Los Angeles, CA
        description: We are seeking a Senior Developer to join our team.
        responsibilities:
          - Write clean, maintainable code
          - Collaborate with cross-functional teams to analyze, design, and ship new features
        qualifications:
          - Bachelor's degree in Computer Science or related field
          - 5+ years of experience in software development
        experience:
          - Node.js
          - React
          - MongoDB
        education:
          - AWS certification
        howToApply: Please send your resume and cover letter to jobs@acmeinc.com.
        salary:
          min: 100000
          max: 150000
        benefits:
          - Health insurance
          - 401(k) matching
        isRemote: true
        isFullTime: true
    JobApplication:
      type: object
      properties:
        jobId:
          type: string
          description: The ID of the job this application belongs to
        companyName:
          type: string
          description: The name of the company this application is for
          example: "Acme Corporation"
        companyLogo:
          type: string
          description: URL of the company's logo
        jobTitle:
          type: string
          description: The title of the job being applied for
          example: "Web Developer"
        name:
          type: string
          description: The name of the applicant
          example: "John Doe"
        email:
          type: string
          format: email
          description: The email address of the applicant
          example: "john.doe@example.com"
        phone:
          type: string
          description: The phone number of the applicant
          example: "555-555-5555"
        resume:
          type: string
          description: URL of the applicant's resume
        address:
          type: string
          description: The address of the applicant
          example: "123 Main St"
        education:
          type: string
          description: The education of the applicant
          example: "Bachelor's Degree in Computer Science"
        experience:
          type: string
          description: The work experience of the applicant
          example: "5 years of experience as a full-stack developer"
        coverLetter:
          type: string
          description: The cover letter of the applicant
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit..."
        socialMediaUrls:
          type: object
          description: URLs to the applicant's social media profiles
          example:
            twitter: "https://twitter.com/johndoe"
            linkedin: "https://www.linkedin.com/in/johndoe"
          additionalProperties:
            type: string
      required:
        - companyName
        - jobTitle

    OurPartner:
      type: object
      required:
        - companyName
        - logo
        - websiteUrl
      properties:
        companyName:
          type: string
          description: The name of the partner company.
        logo:
          type: string
          format: binary
          description: The logo image file of the partner company.
        websiteUrl:
          type: string
          description: The URL of the partner company's website.
      example:
        companyName: "Dotpot iT"
        logo: <binary data>
        websiteUrl: "https://www.dotpotit.com"

    SocialMedia:
      type: object
      properties:
        platform:
          type: string
          enum:
            - Facebook
            - Twitter
            - Instagram
            - LinkedIn
            - YouTube
            - Pinterest
            - TikTok
            - Snapchat
            - Whatsapp
          description: The platform of the social media account
          example: Facebook
        username:
          type: string
          description: The username of the social media account
        url:
          type: string
          description: The URL of the social media account
          example: https://www.facebook.com/example
        icon:
          type: string
          description: The icon of the social media account
      required:
        - platform
        - url
      additionalProperties: false
    SocialMediaResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
          example: true
        message:
          type: string
          description: A descriptive message about the operation
          example: Social media account created successfully
        socialMedia:
          $ref: '#/components/schemas/SocialMedia'
          description: The social media account data
      required:
        - success
      additionalProperties: false   
    SocialMediaRequest:
      type: object
      properties:
        platform:
          type: string
          enum: [Facebook, Twitter, Instagram, LinkedIn, YouTube, Pinterest, TikTok, Snapchat, Whatsapp]
          description: The platform of the social media account
        username:
          type: string
          description: The username of the social media account
        url:
          type: string
          description: The URL of the social media account
        icon:
          type: string
          description: The icon associated with the social media account
      required:
        - platform
        - url
      additionalProperties: false

    TeamMemberRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the team member
        title:
          type: string
          description: The title of the team member
        bio:
          type: string
          description: The bio of the team member
        image:
          type: string
          description: The image URL of the team member
        email:
          type: string
          description: The email of the team member
        phone:
          type: string
          description: The phone number of the team member
        socialMediaUrls:
          type: object
          additionalProperties:
            type: string
          description: URLs of social media accounts associated with the team member
        link:
          type: string
          description: The link associated with the team member
      required:
        - name
        - title
        - image

    Work:
      type: object
      properties:
        _id:
          type: string
          description: The ID of the work
        title:
          type: string
          description: The title of the work
        description:
          type: string
          description: The description of the work
        image:
          type: string
          description: The image URL of the work
        link:
          type: string
          description: The link of the work
        technologies:
          type: array
          items:
            type: string
          description: The technologies used in the work
        client:
          type: string
          description: The client of the work
        clientLink:
          type: string
          description: The client link of the work
        startDate:
          type: string
          format: date-time
          description: The start date of the work
        endDate:
          type: string
          format: date-time
          description: The end date of the work
        status:
          type: string
          enum:
            - Pending
            - In Progress
            - Completed
          description: The status of the work
        assignedTo:
          type: string
          description: The ID of the user assigned to the work
        createdBy:
          type: string
          description: The ID of the user who created the work
      required:
        - title
        - image
      example:
        _id: 61234567890abcdef123456
        title: Example Work
        description: This is an example work.
        image: https://example.com/work.jpg
        link: https://example.com/work
        technologies:
          - HTML
          - CSS
          - JavaScript
        client: Example Client
        clientLink: https://example.com/client
        startDate: '2022-01-01T00:00:00Z'
        endDate: '2022-02-01T00:00:00Z'
        status: In Progress
        assignedTo: 61234567890abcdef123456
        createdBy: 61234567890abcdef123456

    UpdateWorkRequest:
      type: object
      properties:
        title:
          type: string
          description: The updated title of the work
        description:
          type: string
          description: The updated description of the work
        image:
          type: string
          description: The updated image URL of the work
        link:
          type: string
          description: The updated link of the work
        technologies:
          type: array
          items:
            type: string
          description: The updated technologies used in the work
        client:
          type: string
          description: The updated client of the work
        clientLink:
          type: string
          description: The updated client link of the work
        startDate:
          type: string
          format: date-time
          description: The updated start date of the work
        endDate:
          type: string
          format: date-time
          description: The updated end date of the work
        status:
          type: string
          enum:
            - Pending
            - In Progress
            - Completed
          description: The updated status of the work
        assignedTo:
          type: string
          description: The updated ID of the user assigned to the work
      example:
        title: Updated Work Title
        description: Updated work description.
        image: https://example.com/updated-work.jpg
        link: https://example.com/updated-work
        technologies:
          - Updated HTML
          - Updated CSS
          - Updated JavaScript
        client: Updated Client
        clientLink: https://example.com/updated-client
        startDate: '2022-03-01T00:00:00Z'
        endDate: '2022-04-01T00:00:00Z'
        status: Completed
        assignedTo: 61234567890abcdef123456

    WorkResponse:
      type: object
      properties:
        _id:
          type: string
          description: The ID of the work
        title:
          type: string
          description: The title of the work
        description:
          type: string
          description: The description of the work
        image:
          type: string
          description: The image URL of the work
        link:
          type: string
          description: The link of the work
        technologies:
          type: array
          items:
            type: string
          description: The technologies used in the work
        client:
          type: string
          description: The client of the work
        clientLink:
          type: string
          description: The client link of the work
        startDate:
          type: string
          format: date-time
          description: The start date of the work
        endDate:
          type: string
          format: date-time
          description: The end date of the work
        status:
          type: string
          enum:
            - Pending
            - In Progress
            - Completed
          description: The status of the work
        assignedTo:
          type: string
          description: The ID of the user assigned to the work
        createdBy:
          type: string
          description: The ID of the user who created the work
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the work
        updatedAt:
          type: string
          format: date-time
          description: The last update timestamp of the work
      example:
        _id: 611111111111111111111111
        title: Sample Work
        description: Sample work description.
        image: https://example.com/sample-work.jpg
        link: https://example.com/sample-work
        technologies:
          - HTML
          - CSS
          - JavaScript
        client: Sample Client
        clientLink: https://example.com/sample-client
        startDate: '2022-01-01T00:00:00Z'
        endDate: '2022-02-01T00:00:00Z'
        status: Completed
        assignedTo: 61234567890abcdef123456
        createdBy: 60987654321fedcba098765
        createdAt: '2021-08-10T12:34:56Z'
        updatedAt: '2021-08-20T09:12:34Z'

    CreateWorkRequest:
      type: object
      properties:
        title:
          type: string
          description: The title of the work
          example: Sample Work
          minLength: 1
          maxLength: 100
        description:
          type: string
          description: The description of the work
          example: Sample work description.
        image:
          type: string
          description: The image URL of the work
          example: https://example.com/sample-work.jpg
        link:
          type: string
          description: The link of the work
          example: https://example.com/sample-work
        technologies:
          type: array
          items:
            type: string
          description: The technologies used in the work
          example:
            - HTML
            - CSS
            - JavaScript
        client:
          type: string
          description: The client of the work
          example: Sample Client
          minLength: 1
          maxLength: 100
        clientLink:
          type: string
          description: The client link of the work
          example: https://example.com/sample-client
        startDate:
          type: string
          format: date-time
          description: The start date of the work
          example: '2022-01-01T00:00:00Z'
        endDate:
          type: string
          format: date-time
          description: The end date of the work
          example: '2022-02-01T00:00:00Z'
        status:
          type: string
          enum:
            - Pending
            - In Progress
            - Completed
          description: The status of the work
          example: Completed
      required:
        - title
        - image
        - status
      example:
        title: Sample Work
        description: Sample work description.
        image: https://example.com/sample-work.jpg
        link: https://example.com/sample-work
        technologies:
          - HTML
          - CSS
          - JavaScript
        client: Sample Client
        clientLink: https://example.com/sample-client
        startDate: '2022-01-01T00:00:00Z'
        endDate: '2022-02-01T00:00:00Z'
        status: Completed

    Order:
      type: object
      properties:
        client_id:
          type: string
          description: The ID of the client associated with the order.
        total_cost:
          type: number
          description: The total cost of the order.
        selected_items:
          type: object
          description: The selected items for the order.
        status:
          type: string
          enum:
            - Pending
            - Active
            - Delivered
            - Cancelled
          default: Pending
          description: The status of the order.
      required:
        - total_cost
        - selected_items

info:
  title: Auth API
  version: 1.0.0
tags:
  - name: Auth
    description: Authentication APIs

info:
  title: User API
  version: 1.0.0
  description: API for managing user accounts

tags:
  - name: Work Api
    description: Endpoints for managing Works

info:
  title: Blog API
  version: 1.0.0
  description: API for managing blogs

tags:
  - name: Blog
    description: Operations related to blog posts

info:
  title: Chats API
  version: 1.0.0
  description: API for managing chats

tags:
  - name: Chats
    description: API for managing chat conversations

info:
  title: Order API
  version: 1.0.0
  description: API for managing order

tags:
  - name: Order Api
    description: API for managing order

paths:
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Register user
      description: Registers a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Token and user object are returned on successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: User already exists or invalid input provided
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      description: Logs in a user and returns a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Token and user object are returned on successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid email or password
  /api/auth/google:
    post:
      tags:
        - Auth
      summary: Sign up using Google
      description: Sign up a user using their Google account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
      responses:
        '200':
          description: Token and user object are returned on successful signup
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized access
  /api/auth/reset-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: Requests a password reset and sends an email to the user with a reset link.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Email sent successfully
        '400':
          description: User not found
  /api/auth/reset-password/{resetToken}:
    post:
      tags:
        - Auth
      summary: Verify password reset token
      description: Verifies a password reset token and sets a new password.
      parameters:
        - in: path
          name: resetToken
          required: true
          description: Token generated for password reset
          schema:
            type: string
      requestBody:
        description: New password for the user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  required: true
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid token or password format
        '404':
          description: Token not found

  /api/user:
    get:
      tags:
        - User
      summary: Get current user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
    put:
      tags:
        - User
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        description: User object to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
    delete:
      tags:
        - User
      summary: Delete user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /api/user/all:
    get:
      tags:
        - User
      summary: Get all users (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number to retrieve
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Maximum number of users to retrieve per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /api/blog:
    get:
      tags:
        - Blog
      summary: Get a paginated list of all blog posts
      parameters:
        - in: query
          name: page
          description: The page number to retrieve (default: 1)
          schema:
            type: integer
        - in: query
          name: limit
          description: The number of posts to retrieve per page (default: 10)
          schema:
            type: integer
      responses:
        '200':
          description: A list of blog posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalBlogs:
                    type: integer
                    description: The total number of blog posts in the database
                  totalPages:
                    type: integer
                    description: The total number of pages of blog posts based on the page size and total number of posts
                  currentPage:
                    type: integer
                    description: The current page number of the retrieved posts
                  blogs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Blog'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Blog
      summary: Create a new blog post
      requestBody:
        description: The blog post to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        '201':
          description: The created blog post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    
  /api/blog/{id}:
    get:
      tags:
        - Blog
      summary: Get a blog post by ID
      parameters:
        - in: path
          name: id
          description: The ID of the blog post to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The retrieved blog post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '404':
          description: Blog post not found
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Blog
      summary: Update a blog post by ID
      parameters:
        - in: path
          name: id
          description: The ID of the blog post to update
          required: true
          schema:
            type: string
      requestBody:
        description: The updated blog post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        '200':
          description: The updated blog post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Blog post not found
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Blog
      summary: Delete a blog post by ID
      parameters:
        - in: path
          name: id
          description: The unique ID of the blog post to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Blog post deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Blog post not found
        '500':
          $ref: '#/components/responses/ServerError'

  /api/client_review:
    get:
      tags:
        - Client_review
      summary: Get all client reviews
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The page number to retrieve
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: The number of reviews per page to retrieve
      responses:
        '200':
          description: A list of client reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: integer
                    description: The total number of client reviews
                  totalPages:
                    type: integer
                    description: The total number of pages of reviews
                  currentPage:
                    type: integer
                    description: The current page number
                  clientReviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClientReview'
    post:
      tags:
        - Client_review
      summary: Create a new client review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientReview'
      responses:
        '201':
          description: The created client review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientReview'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/client_review/{id}:
    get:
      tags:
        - Client_review
      summary: Get a client review by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the client review to retrieve
      responses:
        '200':
          description: The client review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientReview'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Client_review
      summary: Update a client review by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the client review to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientReview'
      responses:
        '200':
          description: The updated client review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientReview'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Client_review
      summary: Delete a client review by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string

  /api/chats:
      get:
        summary: Get all chats
        description: Get a paginated list of all chats with last messages and admin unseen message count.
        tags:
          - Admin_Chats
        parameters:
          - in: query
            name: page
            schema:
              type: integer
            description: The page number to retrieve. Defaults to 1 if not provided.
        responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    chats:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                          creator:
                            type: string
                          participant:
                            type: string
                          updatedAt:
                            type: string
                          createdAt:
                            type: string
                          lastMessage:
                            type: object
                            properties:
                              _id:
                                type: string
                              conversation_id:
                                type: string
                              sender:
                                type: string
                              receiver:
                                type: string
                              text:
                                type: string
                              isAdminSeen:
                                type: boolean
                              createdAt:
                                type: string
                              updatedAt:
                                type: string
                          adminUnseenCount:
                            type: integer
                    totalChatsCount:
                      type: integer
                    currentPage:
                      type: integer
        security:
          - BearerAuth: []

      post:
        summary: Create a new chat
        description: Create a new chat conversation between a visitor and an admin.
        tags:
          - Public_Chats
        requestBody:
          description: Chat object to be created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  creator:
                    type: string
                  participant:
                    type: string
                required:
                  - creator
                  - participant
        responses:
          "201":
            description: Created
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                    conversation_id:
                      type: string
                    sender:
                      type: string
                    receiver:
                      type: string
                    text:
                      type: string
                    isAdminSeen:
                      type: boolean
                    createdAt:
                      type: string
                    updatedAt:
                      type: string
        security:
          - BearerAuth: []
  /api/chats/totalAdminUnseen:
    get:
      tags:
        - Admin_Chats
      summary: Get the total number of unread messages for admin
      produces:
        - application/json
      security:
        - BearerAuth : []
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              count:
                type: integer
                description: Total number of unread messages for admin

  /api/chats/{conversationId}/messages:
    get:
      tags:
        - Public_Chats
      summary: Get messages for a chat by ID
      parameters:
        - in: path
          name: conversationId
          required: true
          type: string
          description: ID of the conversation
      produces:
        - application/json
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              messages:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

    post:
      tags:
        - Public_Chats
      summary: Add a new message to a chat
      parameters:
        - in: path
          name: conversationId
          required: true
          type: string
          description: ID of the conversation
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              text:
                type: string
                description: Text of the message
              attachment:
                type: string
                description: URL of the attachment
              isOrder:
                type: boolean
                description: Indicates if the message is an order
      produces:
        - application/json
      responses:
        '201':
          description: Successful response
          schema:
            $ref: '#/components/schemas/Message'

  /api/chats/{conversationId}/messages/admin:
    get:
      tags:
        - Admin_Chats
      summary: Get messages for a chat by ID (for admin)

      security:
        - BearerAuth : []
        
      parameters:
        - in: path
          name: conversationId
          required: true
          type: string
          description: ID of the conversation
      produces:
        - application/json
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              messages:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

  /api/chats/{conversationId}/reply:
    post:
      tags:
        - Admin_Chats
      summary: Reply to a chat
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: conversationId
          required: true
          type: string
          description: ID of the conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: Text of the message
                attachment:
                  type: string
                  description: URL of the attachment
      produces:
        - application/json
      responses:
        '201':
          description: Successful response
          schema:
            $ref: '#/components/schemas/Message'
  /api/chats/{conversationId}:
    delete:
      tags:
        - Admin_Chats
      summary: Delete a conversation with messages and attachments
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: conversationId
          required: true
          type: string
          description: ID of the conversation to delete
      responses:
        '204':
          description: Conversation deleted successfully
        '404':
          description: Conversation not found
        '500':
          description: Internal server error
  /api/job:
    get:
      tags:
        - Job
      summary: Retrieve a list of jobs
      description: Retrieves jobs from the database with pagination based on the query parameters.
      parameters:
        - name: page
          in: query
          type: integer
          description: The page number to retrieve. Defaults to 1 if not specified.
        - name: limit
          in: query
          type: integer
          description: The number of jobs to retrieve per page. Defaults to 10 if not specified.
      produces:
        - application/json
      responses:
        200:
          description: A list of jobs and metadata about the pagination.
          schema:
            type: object
            properties:
              totalJobs:
                type: integer
                description: The total number of jobs in the database.
              totalPages:
                type: integer
                description: The total number of pages based on the limit and total number of jobs.
              currentPage:
                type: integer
                description: The current page number.
              jobs:
                type: array
                items:
                  $ref: '#/components/schemas/Job'

    post:
      tags:
        - Job
      summary: Create a new job
      description: Creates a new job in the database.
      parameters:
        - name: job
          in: body
          description: The job object to create.
          required: true
          schema:
            $ref: '#/components/schemas/Job'
      produces:
        - application/json
      responses:
        200:
          description: The created job.
          schema:
            $ref: '#/components/schemas/Job'

  /api/job/{id}:
    get:
      tags:
        - Job
      summary: Retrieve a job by ID
      description: Retrieves a job from the database by its ID.
      parameters:
        - name: id
          in: path
          type: string
          description: The ID of the job to retrieve.
          required: true
      produces:
        - application/json
      responses:
        200:
          description: The retrieved job.
          schema:
            $ref: '#/components/schemas/Job'
        404:
          description: The specified job was not found.

    put:
      tags:
        - Job
      summary: Update a job by ID
      security:
        - BearerAuth: []
      description: Updates a job in the database by its ID.
      parameters:
        - name: id
          in: path
          type: string
          description: The ID of the job to update.
          required: true
        - name: job
          in: body
          description: The updated job object.
          required: true
          schema:
            $ref: '#/components/schemas/Job'
      produces:
        - application/json
      responses:
        200:
          description: The updated job.
          schema:
            $ref: '#/components/schemas/Job'
        404:
          description: The specified job was not found.

    delete:
      tags:
        - Job
      summary: Delete a job by ID
      description: Deletes a job from the database by its ID.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          type: string
          description: The ID of the job to delete

  /api/job_application:
    post:
      tags:
        - Job Application
      summary: Create a job application
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: jobApplication
          description: The job application to create
          schema:
            $ref: '#/components/schemas/JobApplication'
      responses:
        '201':
          description: Job application created successfully
          schema:
            $ref: '#/components/schemas/JobApplication'
        '500':
          description: Internal server error
    get:
      tags:
        - Job Application
      summary: Get all job applications
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: integer
          description: The page number to retrieve
        - in: query
          name: limit
          type: integer
          description: The number of job applications to retrieve per page
      responses:
        '200':
          description: Job applications retrieved successfully
          schema:
            $ref: '#/components/schemas/JobApplication'
        '500':
          description: Internal server error
  /api/job_application/{id}:
    get:
      tags:
        - Job Application
      summary: Get a specific job application by ID
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: The ID of the job application to retrieve
      responses:
        '200':
          description: Job application retrieved successfully
          schema:
            $ref: '#/components/schemas/JobApplication'
        '404':
          description: Job application not found
        '500':
          description: Internal server error
    put:
      tags:
        - Job Application
      summary: Update a job application by ID
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: The ID of the job application to update
        - in: body
          name: jobApplication
          description: The job application data to update
          schema:
            $ref: '#/components/schemas/JobApplication'
      responses:
        '200':
          description: Job application updated successfully
          schema:
            $ref: '#/components/schemas/JobApplication'
        '404':
          description: Job application not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Job Application
      summary: Delete a job application by ID
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: The ID of the job application to delete
      responses:
        '200':
          description: Job application deleted successfully
        '404':
          description: Job application not found
        '500':
          description: Internal server error
  
  /api/our_partner:
    get:
      summary: Get all partners
      tags:
        - Partner
      parameters:
        - name: page
          in: query
          description: Page number to retrieve
          type: integer
          required: false
        - name: limit
          in: query
          description: Maximum number of partners per page
          type: integer
          required: false
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              ourPartners:
                type: array
                items:
                  $ref: '#/components/schemas/OurPartner'
              totalPages:
                type: integer
              currentPage:
                type: integer
              totalOurPartners:
                type: integer
    post:
      summary: Create a new partner
      tags:
        - Partner
      parameters:
        - name: partner
          in: body
          description: Partner object to create
          schema:
            $ref: '#/definitions/OurPartnerInput'
      security:
        - adminAuth: []
      responses:
        '201':
          description: Successful response
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/OurPartner'
        '400':
          description: Bad request
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string

  /api/our_partner/{id}:
    get:
      summary: Get a specific partner by ID
      tags:
        - Partner
      parameters:
        - name: id
          in: path
          description: ID of the partner to retrieve
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/OurPartner'
        '400':
          description: Bad request
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
        '404':
          description: Partner not found
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string

    put:
      summary: Update a partner by ID
      tags:
        - Partner
      parameters:
        - name: id
          in: path
          description: ID of the partner to update
          required: true
          type: string
        - name: partner
          in: body
          description: Partner object to update
          schema:
            $ref: '#/definitions/OurPartnerInput'
      security:
        - adminAuth: []
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: '#/components/schemas/OurPartner'
        '400':
          description: Bad request
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
        '404':
          description: Not found
    delete:
      tags:
        - Partner
      summary: Delete a partner by ID
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: The ID of the partner to delete
      responses:
        '200':
          description: Our partner deleted successfully
        '404':
          description: Our partner not found
        '500':
          description: Internal server error
  /api/service:
    post:
      summary: Create a new service
      tags:
        - Service
      parameters: []
      security:
        - adminAuth: []
      responses:
        201:
          description: Service created successfully
          schema:
            type: object
            properties:
              message:
                type: string
              service:
                $ref: "#/definitions/Service"
        500:
          description: Something went wrong
    get:
      summary: Get all services
      tags:
        - Service
      parameters: []
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              totalServices:
                type: integer
              totalPages:
                type: integer
              currentPage:
                type: integer
              services:
                type: array
                items:
                  $ref: "#/definitions/Service"
        500:
          description: Something went wrong
  /api/service/{id}:
    get:
      summary: Get a specific service by ID
      tags:
        - Service
      parameters:
        - name: id
          in: path
          description: Service ID
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Service"
        404:
          description: Service not found
        500:
          description: Something went wrong
    put:
      summary: Update a service by ID
      tags:
        - Service
      security:
        - adminAuth: []
      parameters:
        - name: id
          in: path
          description: Service ID
          required: true
          type: string
      responses:
        200:
          description: Service updated successfully
          schema:
            type: object
            properties:
              message:
                type: string
              service:
                $ref: "#/definitions/Service"
        404:
          description: Service not found
        500:
          description: Something went wrong
    delete:
      summary: Delete a service by ID
      tags:
        - Service
      security:
        - adminAuth: []
      parameters:
        - name: id
          in: path
          description: Service ID
          required: true
          type: string
      responses:
        200:
          description: Service deleted successfully
        404:
          description: Service not found
        500:
          description: Something went wrong

  /api/socialmedia:
    post:
      tags:
        - Social Media
      summary: Create a new social media account
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialMediaRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMediaResponse'
        '500':
          description: Internal server error

    get:
      tags:
        - Social Media
      summary: Get all social media accounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SocialMediaResponse'
        '500':
          description: Internal server error

  /api/socialmedia/{id}:
    get:
      tags:
        - Social Media
      summary: Get a specific social media account by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the social media account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMediaResponse'
        '404':
          description: Social media account not found
        '500':
          description: Internal server error

    put:
      tags:
        - Social Media
      summary: Update a social media account by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the social media account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialMediaRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMediaResponse'
        '404':
          description: Social media account not found
        '500':
          description: Internal server error

    delete:
      tags:
        - Social Media
      summary: Delete a social media account by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the social media account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Social media account not found
        '500':
          description: Internal server error



  /api/team_member:
    post:
      tags:
        - Team Member
      summary: Create a new team member
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMemberRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMemberResponse'
        '500':
          description: Internal Server Error
    get:
      tags:
        - Team Member
      summary: Get all team members
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMemberListResponse'
        '500':
          description: Internal Server Error

  /api/team_member/{id}:
    get:
      tags:
        - Team Member
      summary: Get a specific team member by ID
      parameters:
        - name: id
          in: path
          description: ID of the team member
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMemberResponse'
        '404':
          description: Team member not found
        '500':
          description: Internal Server Error
    put:
      tags:
        - Team Member
      summary: Update a team member by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the team member
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMemberRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMemberResponse'
        '404':
          description: Team member not found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Team Member
      summary: Delete a team member by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the team member
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Team member deleted successfully
        '404':
          description: Team member not found
        '500':
          description: Internal Server Error

  /api/work:
    post:
      tags:
        - Work Api
      summary: Create a work
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkResponse'
        '500':
          description: Internal Server Error
    get:
      tags:
        - Work Api
      summary: Get all works
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The page number to retrieve. Defaults to 1 if not specified.
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of works to retrieve per page. Defaults to 10 if not specified.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Work'
        '500':
          description: Internal Server Error

  /work/{id}:
    get:
      tags:
        - Work Api
      summary: Get a specific work by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the work
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkResponse'
        '404':
          description: Work not found
        '500':
          description: Internal Server Error
    put:
      tags:
        - Work Api
      summary: Update a work by ID
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkRequest'
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the work
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkResponse'
        '404':
          description: Work not found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Work Api
      summary: Delete a work by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the work
          required: true
      responses:
        '200':
          description: Work deleted successfully
        '404':
          description: Work not found
        '500':
          description: Internal Server Error

  /api/order:
    post:
      tags:
        - Order Api
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Order'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
    get:
      tags:
        - Order Api
      summary: Get all orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: number
                  totalPages:
                    type: number
                  currentPage:
                    type: number
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/order/{id}:
    get:
      tags:
        - Order Api
      summary: Get a specific order by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: The ID of the order
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
    put:
      tags:
        - Order Api
      summary: Update a specific order by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: The ID of the order
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - Pending
                    - Active
                    - Delivered
                    - Cancelled
              required:
                - status
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
    delete:
      tags:
        - Order Api
      security:
        - BearerAuth: []
      summary: Delete a specific order by ID
      parameters:
        - name: id
          in: path
          description: The ID of the order
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order deleted successfully


  /api/upload:
    post:
      tags:
        - Upload Api
      summary: Upload file to conversation folder
      consumes:
        - multipart/form-data
      parameters:
        - name: file
          in: formData
          description: The file to upload
          required: true
          type: file
      responses:
        200:
          description: File upload successful

    delete:
      tags:
        - Upload Api
      summary: Remove a file
      security:
        - BearerAuth: []
      parameters:
        - name: filePath
          in: body
          description: The file path to remove
          required: true
          schema:
            type: object
            properties:
              filePath:
                type: string
          responses:
            200:
              description: File remove successful
            500:
              description: File remove failed

  /api/upload/response:
    post:
      tags:
        - Upload Api
      summary: Upload file to client response folder
      consumes:
        - multipart/form-data
      parameters:
        - name: file
          in: formData
          description: The file to upload
          required: true
          type: file
      responses:
        200:
          description: File upload successful

  /api/upload/resumes:
    post:
      tags:
        - Upload Api
      summary: Upload file to resume folder
      consumes:
        - multipart/form-data
      parameters:
        - name: file
          in: formData
          description: The file to upload
          required: true
          type: file
      responses:
        200:
          description: File upload successful

  /api/upload/blogs:
    post:
      tags:
        - Upload Api
      summary: Upload file to blogs folder
      consumes:
        - multipart/form-data
      parameters:
        - name: file
          in: formData
          description: The file to upload
          required: true
          type: file
      responses:
        200:
          description: File upload successful



  /api/client_response:
    post:
      tags:
        - Client Response Api
      summary: Create a new client response
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Client response object
          required: true
          schema:
            $ref: "#/definitions/ClientResponse"
      responses:
        201:
          description: Created
        400:
          description: Bad Request

    get:
      tags:
        - Client Response Api
      summary: Get all client responses
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          description: The page number to retrieve
          required: false
          type: integer
        - in: query
          name: limit
          description: The number of client responses to retrieve per page
          required: false
          type: integer
      responses:
        200:
          description: OK
        500:
          description: Server Error

  /api/client_response/{id}:
    get:
      tags:
        - Client Response Api
      summary: Get a specific client response
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: The ID of the client response
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found

    put:
      tags:
        - Client Response Api
      summary: Update a client response
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: The ID of the client response
          required: true
          type: string
        - in: body
          name: body
          description: Updated client response object
          required: true
          schema:
            $ref: "#/definitions/ClientResponse"
      responses:
        200:
          description: OK
        404:
          description: Not Found
        400:
          description: Bad Request

    delete:
      tags:
        - Client Response Api
      summary: Delete a client response
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: The ID of the client response
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error

  /api/contact_center_service:
    post:
      tags:
        - Contact Center Service Api
      summary: Create a new contact center service
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: body
          description: Contact center service object
          required: true
          schema:
            $ref: "#/definitions/ContactCenterService"
      responses:
        201:
          description: Created
        500:
          description: Server Error

    get:
      tags:
        - Contact Center Service Api
      summary: Get all contact center services
      responses:
        200:
          description: OK
        500:
          description: Server Error

  /api/contact_center_service/{id}:
    get:
      tags:
        - Contact Center Service Api
      summary: Get a single contact center service
      parameters:
        - in: path
          name: id
          description: The ID of the contact center service
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error

    put:
      tags:
        - Contact Center Service Api
      summary: Update a contact center service
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: The ID of the contact center service
          required: true
          type: string
        - in: body
          name: body
          description: Updated contact center service object
          required: true
          schema:
            $ref: "#/definitions/ContactCenterService"
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error

    delete:
      tags:
        - Contact Center Service Api
      summary: Delete a contact center service
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: The ID of the contact center service
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error

  /api/hero:
    post:
      tags:
        - Hero Section Api
      summary: Create a new hero
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: body
          description: Hero object
          required: true
          schema:
            $ref: "#/definitions/Hero"
      responses:
        201:
          description: Created
        400:
          description: Bad Request

    get:
      tags:
        - Hero Section Api
      summary: Get all heroes
      responses:
        200:
          description: OK
        500:
          description: Server Error

  /api/hero/{id}:
    get:
      tags:
        - Hero Section Api
      summary: Get a single hero by ID
      parameters:
        - in: path
          name: id
          description: The ID of the hero
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error

    put:
      tags:
        - Hero Section Api
      summary: Update a hero by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: The ID of the hero
          required: true
          type: string
        - in: body
          name: body
          description: Updated hero object
          required: true
          schema:
            $ref: "#/definitions/Hero"
      responses:
        200:
          description: OK
        404:
          description: Not Found
        400:
          description: Bad Request

    delete:
      tags:
        - Hero Section Api
      summary: Delete a hero by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: The ID of the hero
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error


  /api/info:
    get:
      tags:
        - Info Api
      summary: Get all company information
      responses:
        200:
          description: OK
        500:
          description: Server Error

    post:
      tags:
        - Info Api
      summary: Create a new company information
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: body
          description: Company information object
          required: true
          schema:
            $ref: "#/definitions/CompanyInfo"
      responses:
        201:
          description: Created
        400:
          description: Bad Request

  /api/info/{id}:
    get:
      tags:
        - Info Api
      summary: Get a single company information by ID
      parameters:
        - in: path
          name: id
          description: The ID of the company information
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error

    put:
      tags:
        - Info Api
      summary: Update company information by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: The ID of the company information
          required: true
          type: string
        - in: body
          name: body
          description: Updated company information object
          required: true
          schema:
            $ref: "#/definitions/CompanyInfo"
      responses:
        200:
          description: OK
        404:
          description: Not Found
        400:
          description: Bad Request

    delete:
      tags:
        - Info Api
      summary: Delete company information by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          description: The ID of the company information
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error


  /api/key_feature:
    get:
      tags:
        - Key Feature Api
      summary: Get all key features
      responses:
        200:
          description: OK
        500:
          description: Server Error

    post:
      summary: Create a new key feature
      tags:
        - Key Feature Api
      parameters:
        - in: body
          name: body
          description: Key feature object
          required: true
          schema:
            $ref: "#/definitions/KeyFeature"
      responses:
        201:
          description: Created
        400:
          description: Bad Request
      security:
        - BearerAuth: []

  /api/key_feature/{id}:
    get:
      summary: Get a single key feature by ID
      tags:
        - Key Feature Api
      parameters:
        - in: path
          name: id
          description: The ID of the key feature
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error

    put:
      summary: Update a single key feature by ID
      tags:
        - Key Feature Api
      parameters:
        - in: path
          name: id
          description: The ID of the key feature
          required: true
          type: string
        - in: body
          name: body
          description: Updated key feature object
          required: true
          schema:
            $ref: "#/definitions/KeyFeature"
      responses:
        200:
          description: OK
        404:
          description: Not Found
        400:
          description: Bad Request
      security:
        - BearerAuth: []

    delete:
      summary: Delete a single key feature by ID
      tags:
        - Key Feature Api
      parameters:
        - in: path
          name: id
          description: The ID of the key feature
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error
      security:
        - BearerAuth: []


  /api/partnership-model:
    get:
      summary: Get all partnership models
      tags:
        - Partnership Model
      responses:
        200:
          description: OK
        500:
          description: Server Error

    post:
      summary: Create a new partnership model
      tags:
        - Partnership Model
      parameters:
        - in: body
          name: body
          description: Partnership model object
          required: true
          schema:
            $ref: "#/definitions/PartnershipModel"
      responses:
        200:
          description: OK
        500:
          description: Server Error
      security:
        - BearerAuth: []

  /api/partnership-model/{id}:
    get:
      summary: Get a single partnership model by ID
      tags:
        - Partnership Model
      parameters:
        - in: path
          name: id
          description: The ID of the partnership model
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error

    put:
      summary: Update a single partnership model by ID
      tags:
        - Partnership Model
      parameters:
        - in: path
          name: id
          description: The ID of the partnership model
          required: true
          type: string
        - in: body
          name: body
          description: Updated partnership model object
          required: true
          schema:
            $ref: "#/definitions/PartnershipModel"
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error
      security:
        - BearerAuth: []

    delete:
      summary: Delete a single partnership model by ID
      tags:
        - Partnership Model
      parameters:
        - in: path
          name: id
          description: The ID of the partnership model
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error
      security:
        - BearerAuth: []

  /api/who_we_work_with:
    get:
      summary: Get all Who We Work With items
      tags:
        - Who We Work With Api 
      responses:
        200:
          description: OK
        500:
          description: Server Error

    post:
      summary: Create a new Who We Work With item
      tags:
        - Who We Work With Api
      parameters:
        - in: body
          name: body
          description: Who We Work With item object
          required: true
          schema:
            $ref: "#/definitions/WhoWeWorkWith"
      responses:
        201:
          description: Created
        500:
          description: Server Error
      security:
        - BearerAuth: []

  /api/who_we_work_with/{id}:
    get:
      summary: Get a single Who We Work With item by ID
      tags:
        - Who We Work With Api
      parameters:
        - in: path
          name: id
          description: The ID of the Who We Work With item
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error

    put:
      summary: Update a single Who We Work With item by ID
      tags:
        - Who We Work With Api
      parameters:
        - in: path
          name: id
          description: The ID of the Who We Work With item
          required: true
          type: string
        - in: body
          name: body
          description: Updated Who We Work With item object
          required: true
          schema:
            $ref: "#/definitions/WhoWeWorkWith"
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error
      security:
        - BearerAuth: []

    delete:
      summary: Delete a single Who We Work With item by ID
      tags:
        - Who We Work With Api
      parameters:
        - in: path
          name: id
          description: The ID of the Who We Work With item
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Server Error
      security:
        - BearerAuth: []


  /api/colors:
    get:
      summary: Get all colors
      description: Retrieve a list of all colors
      tags:
        - Color Theme Api
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: "#/definitions/Color"
              message:
                type: string
    post:
      tags:
        - Color Theme Api
      summary: Create a new color
      security:
        - BearerAuth: []
      description: Create a new color
      produces:
        - application/json
      parameters:
        - name: color
          in: body
          description: Color object
          required: true
          schema:
            $ref: "#/definitions/Color"
      responses:
        201:
          description: Created
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: "#/definitions/Color"
              message:
                type: string
  /api/colors/{id}:
    get:
      tags:
        - Color Theme Api
      summary: Get a color by ID
      description: Retrieve a color by its ID
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Color ID
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: "#/definitions/Color"
              message:
                type: string
        404:
          description: Color not found
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: null
              message:
                type: string
    put:
      tags:
        - Color Theme Api
      summary: Update a color by ID
      security:
        - BearerAuth: []
      description: Update a color by its ID
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Color ID
          required: true
          type: string
        - name: color
          in: body
          description: Color object
          required: true
          schema:
            $ref: "#/definitions/Color"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: "#/definitions/Color"
              message:
                type: string
        404:
          description: Color not found
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: null
              message:
                type: string
    delete:
      tags:
        - Color Theme Api
      summary: Delete a color by ID
      description: Delete a color by its ID
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Color ID
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: null
              message:
                type: string
        404:
          description: Color not found
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: Color not found
  /api/admin:
    post:
      tags:
        - Logger
      summary: Log a message as an admin
      parameters:
        - in: body
          name: logMessage
          description: Log message and level
          required: true
          schema:
            type: object
            properties:
              level:
                type: string
                enum: [error, warn, info, verbose, debug, silly]
              message:
                type: string
      responses:
        '200':
          description: OK
  /api/client:
    post:
      tags:
        - Logger
      summary: Log a message as a client
      parameters:
        - in: body
          name: logMessage
          description: Log message and level
          required: true
          schema:
            type: object
            properties:
              level:
                type: string
                enum: [error, warn, info, verbose, debug, silly]
              message:
                type: string
      responses:
        '200':
          description: OK               


